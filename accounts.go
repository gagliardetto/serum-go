// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type MarketStateV2 struct {
	Inner                  MarketState
	OpenOrdersAuthority    ag_solanago.PublicKey
	PruneAuthority         ag_solanago.PublicKey
	ConsumeEventsAuthority ag_solanago.PublicKey

	// Unused bytes for future upgrades.
	Padding [992]uint8
}

func (obj MarketStateV2) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Inner` param:
	err = encoder.Encode(obj.Inner)
	if err != nil {
		return err
	}
	// Serialize `OpenOrdersAuthority` param:
	err = encoder.Encode(obj.OpenOrdersAuthority)
	if err != nil {
		return err
	}
	// Serialize `PruneAuthority` param:
	err = encoder.Encode(obj.PruneAuthority)
	if err != nil {
		return err
	}
	// Serialize `ConsumeEventsAuthority` param:
	err = encoder.Encode(obj.ConsumeEventsAuthority)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketStateV2) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Inner`:
	err = decoder.Decode(&obj.Inner)
	if err != nil {
		return err
	}
	// Deserialize `OpenOrdersAuthority`:
	err = decoder.Decode(&obj.OpenOrdersAuthority)
	if err != nil {
		return err
	}
	// Deserialize `PruneAuthority`:
	err = decoder.Decode(&obj.PruneAuthority)
	if err != nil {
		return err
	}
	// Deserialize `ConsumeEventsAuthority`:
	err = decoder.Decode(&obj.ConsumeEventsAuthority)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	return nil
}

type MarketState struct {
	// 0
	// Initialized, Market
	AccountFlags uint64

	// 1
	OwnAddress [4]uint64

	// 5
	VaultSignerNonce uint64

	// 6
	CoinMint [4]uint64

	// 10
	PcMint [4]uint64

	// 14
	CoinVault [4]uint64

	// 18
	CoinDepositsTotal uint64

	// 19
	CoinFeesAccrued uint64

	// 20
	PcVault [4]uint64

	// 24
	PcDepositsTotal uint64

	// 25
	PcFeesAccrued uint64

	// 26
	PcDustThreshold uint64

	// 27
	ReqQ [4]uint64

	// 31
	EventQ [4]uint64

	// 35
	Bids [4]uint64

	// 39
	Asks [4]uint64

	// 43
	CoinLotSize uint64

	// 44
	PcLotSize uint64

	// 45
	FeeRateBps uint64

	// 46
	ReferrerRebatesAccrued uint64
}

func (obj MarketState) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountFlags` param:
	err = encoder.Encode(obj.AccountFlags)
	if err != nil {
		return err
	}
	// Serialize `OwnAddress` param:
	err = encoder.Encode(obj.OwnAddress)
	if err != nil {
		return err
	}
	// Serialize `VaultSignerNonce` param:
	err = encoder.Encode(obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	// Serialize `CoinMint` param:
	err = encoder.Encode(obj.CoinMint)
	if err != nil {
		return err
	}
	// Serialize `PcMint` param:
	err = encoder.Encode(obj.PcMint)
	if err != nil {
		return err
	}
	// Serialize `CoinVault` param:
	err = encoder.Encode(obj.CoinVault)
	if err != nil {
		return err
	}
	// Serialize `CoinDepositsTotal` param:
	err = encoder.Encode(obj.CoinDepositsTotal)
	if err != nil {
		return err
	}
	// Serialize `CoinFeesAccrued` param:
	err = encoder.Encode(obj.CoinFeesAccrued)
	if err != nil {
		return err
	}
	// Serialize `PcVault` param:
	err = encoder.Encode(obj.PcVault)
	if err != nil {
		return err
	}
	// Serialize `PcDepositsTotal` param:
	err = encoder.Encode(obj.PcDepositsTotal)
	if err != nil {
		return err
	}
	// Serialize `PcFeesAccrued` param:
	err = encoder.Encode(obj.PcFeesAccrued)
	if err != nil {
		return err
	}
	// Serialize `PcDustThreshold` param:
	err = encoder.Encode(obj.PcDustThreshold)
	if err != nil {
		return err
	}
	// Serialize `ReqQ` param:
	err = encoder.Encode(obj.ReqQ)
	if err != nil {
		return err
	}
	// Serialize `EventQ` param:
	err = encoder.Encode(obj.EventQ)
	if err != nil {
		return err
	}
	// Serialize `Bids` param:
	err = encoder.Encode(obj.Bids)
	if err != nil {
		return err
	}
	// Serialize `Asks` param:
	err = encoder.Encode(obj.Asks)
	if err != nil {
		return err
	}
	// Serialize `CoinLotSize` param:
	err = encoder.Encode(obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Serialize `PcLotSize` param:
	err = encoder.Encode(obj.PcLotSize)
	if err != nil {
		return err
	}
	// Serialize `FeeRateBps` param:
	err = encoder.Encode(obj.FeeRateBps)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRebatesAccrued` param:
	err = encoder.Encode(obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MarketState) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountFlags`:
	err = decoder.Decode(&obj.AccountFlags)
	if err != nil {
		return err
	}
	// Deserialize `OwnAddress`:
	err = decoder.Decode(&obj.OwnAddress)
	if err != nil {
		return err
	}
	// Deserialize `VaultSignerNonce`:
	err = decoder.Decode(&obj.VaultSignerNonce)
	if err != nil {
		return err
	}
	// Deserialize `CoinMint`:
	err = decoder.Decode(&obj.CoinMint)
	if err != nil {
		return err
	}
	// Deserialize `PcMint`:
	err = decoder.Decode(&obj.PcMint)
	if err != nil {
		return err
	}
	// Deserialize `CoinVault`:
	err = decoder.Decode(&obj.CoinVault)
	if err != nil {
		return err
	}
	// Deserialize `CoinDepositsTotal`:
	err = decoder.Decode(&obj.CoinDepositsTotal)
	if err != nil {
		return err
	}
	// Deserialize `CoinFeesAccrued`:
	err = decoder.Decode(&obj.CoinFeesAccrued)
	if err != nil {
		return err
	}
	// Deserialize `PcVault`:
	err = decoder.Decode(&obj.PcVault)
	if err != nil {
		return err
	}
	// Deserialize `PcDepositsTotal`:
	err = decoder.Decode(&obj.PcDepositsTotal)
	if err != nil {
		return err
	}
	// Deserialize `PcFeesAccrued`:
	err = decoder.Decode(&obj.PcFeesAccrued)
	if err != nil {
		return err
	}
	// Deserialize `PcDustThreshold`:
	err = decoder.Decode(&obj.PcDustThreshold)
	if err != nil {
		return err
	}
	// Deserialize `ReqQ`:
	err = decoder.Decode(&obj.ReqQ)
	if err != nil {
		return err
	}
	// Deserialize `EventQ`:
	err = decoder.Decode(&obj.EventQ)
	if err != nil {
		return err
	}
	// Deserialize `Bids`:
	err = decoder.Decode(&obj.Bids)
	if err != nil {
		return err
	}
	// Deserialize `Asks`:
	err = decoder.Decode(&obj.Asks)
	if err != nil {
		return err
	}
	// Deserialize `CoinLotSize`:
	err = decoder.Decode(&obj.CoinLotSize)
	if err != nil {
		return err
	}
	// Deserialize `PcLotSize`:
	err = decoder.Decode(&obj.PcLotSize)
	if err != nil {
		return err
	}
	// Deserialize `FeeRateBps`:
	err = decoder.Decode(&obj.FeeRateBps)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRebatesAccrued`:
	err = decoder.Decode(&obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	return nil
}

type OpenOrders struct {
	// Initialized, OpenOrders
	AccountFlags    uint64
	Market          [4]uint64
	Owner           [4]uint64
	NativeCoinFree  uint64
	NativeCoinTotal uint64
	NativePcFree    uint64
	NativePcTotal   uint64
	FreeSlotBits    ag_binary.Uint128
	IsBidBits       ag_binary.Uint128
	Orders          [128]ag_binary.Uint128

	// Using Option<NonZeroU64> in a pod type requires nightly
	ClientOrderIds         [128]uint64
	ReferrerRebatesAccrued uint64
}

func (obj OpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountFlags` param:
	err = encoder.Encode(obj.AccountFlags)
	if err != nil {
		return err
	}
	// Serialize `Market` param:
	err = encoder.Encode(obj.Market)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `NativeCoinFree` param:
	err = encoder.Encode(obj.NativeCoinFree)
	if err != nil {
		return err
	}
	// Serialize `NativeCoinTotal` param:
	err = encoder.Encode(obj.NativeCoinTotal)
	if err != nil {
		return err
	}
	// Serialize `NativePcFree` param:
	err = encoder.Encode(obj.NativePcFree)
	if err != nil {
		return err
	}
	// Serialize `NativePcTotal` param:
	err = encoder.Encode(obj.NativePcTotal)
	if err != nil {
		return err
	}
	// Serialize `FreeSlotBits` param:
	err = encoder.Encode(obj.FreeSlotBits)
	if err != nil {
		return err
	}
	// Serialize `IsBidBits` param:
	err = encoder.Encode(obj.IsBidBits)
	if err != nil {
		return err
	}
	// Serialize `Orders` param:
	err = encoder.Encode(obj.Orders)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderIds` param:
	err = encoder.Encode(obj.ClientOrderIds)
	if err != nil {
		return err
	}
	// Serialize `ReferrerRebatesAccrued` param:
	err = encoder.Encode(obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountFlags`:
	err = decoder.Decode(&obj.AccountFlags)
	if err != nil {
		return err
	}
	// Deserialize `Market`:
	err = decoder.Decode(&obj.Market)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `NativeCoinFree`:
	err = decoder.Decode(&obj.NativeCoinFree)
	if err != nil {
		return err
	}
	// Deserialize `NativeCoinTotal`:
	err = decoder.Decode(&obj.NativeCoinTotal)
	if err != nil {
		return err
	}
	// Deserialize `NativePcFree`:
	err = decoder.Decode(&obj.NativePcFree)
	if err != nil {
		return err
	}
	// Deserialize `NativePcTotal`:
	err = decoder.Decode(&obj.NativePcTotal)
	if err != nil {
		return err
	}
	// Deserialize `FreeSlotBits`:
	err = decoder.Decode(&obj.FreeSlotBits)
	if err != nil {
		return err
	}
	// Deserialize `IsBidBits`:
	err = decoder.Decode(&obj.IsBidBits)
	if err != nil {
		return err
	}
	// Deserialize `Orders`:
	err = decoder.Decode(&obj.Orders)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderIds`:
	err = decoder.Decode(&obj.ClientOrderIds)
	if err != nil {
		return err
	}
	// Deserialize `ReferrerRebatesAccrued`:
	err = decoder.Decode(&obj.ReferrerRebatesAccrued)
	if err != nil {
		return err
	}
	return nil
}

type RequestQueueHeader struct {
	// Initialized, RequestQueue
	AccountFlags uint64
	Head         uint64
	Count        uint64
	NextSeqNum   uint64
}

func (obj RequestQueueHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountFlags` param:
	err = encoder.Encode(obj.AccountFlags)
	if err != nil {
		return err
	}
	// Serialize `Head` param:
	err = encoder.Encode(obj.Head)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `NextSeqNum` param:
	err = encoder.Encode(obj.NextSeqNum)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RequestQueueHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountFlags`:
	err = decoder.Decode(&obj.AccountFlags)
	if err != nil {
		return err
	}
	// Deserialize `Head`:
	err = decoder.Decode(&obj.Head)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `NextSeqNum`:
	err = decoder.Decode(&obj.NextSeqNum)
	if err != nil {
		return err
	}
	return nil
}

type Request struct {
	RequestFlags         uint8
	OwnerSlot            uint8
	FeeTier              uint8
	SelfTradeBehavior    uint8
	Padding              [4]uint8
	MaxCoinQtyOrCancelId uint64
	NativePcQtyLocked    uint64
	OrderId              ag_binary.Uint128
	Owner                [4]uint64
	ClientOrderId        uint64
}

func (obj Request) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `RequestFlags` param:
	err = encoder.Encode(obj.RequestFlags)
	if err != nil {
		return err
	}
	// Serialize `OwnerSlot` param:
	err = encoder.Encode(obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Serialize `FeeTier` param:
	err = encoder.Encode(obj.FeeTier)
	if err != nil {
		return err
	}
	// Serialize `SelfTradeBehavior` param:
	err = encoder.Encode(obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `MaxCoinQtyOrCancelId` param:
	err = encoder.Encode(obj.MaxCoinQtyOrCancelId)
	if err != nil {
		return err
	}
	// Serialize `NativePcQtyLocked` param:
	err = encoder.Encode(obj.NativePcQtyLocked)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Request) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `RequestFlags`:
	err = decoder.Decode(&obj.RequestFlags)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSlot`:
	err = decoder.Decode(&obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Deserialize `FeeTier`:
	err = decoder.Decode(&obj.FeeTier)
	if err != nil {
		return err
	}
	// Deserialize `SelfTradeBehavior`:
	err = decoder.Decode(&obj.SelfTradeBehavior)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `MaxCoinQtyOrCancelId`:
	err = decoder.Decode(&obj.MaxCoinQtyOrCancelId)
	if err != nil {
		return err
	}
	// Deserialize `NativePcQtyLocked`:
	err = decoder.Decode(&obj.NativePcQtyLocked)
	if err != nil {
		return err
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

type EventQueueHeader struct {
	// Initialized, EventQueue
	AccountFlags uint64
	Head         uint64
	Count        uint64
	SeqNum       uint64
}

func (obj EventQueueHeader) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `AccountFlags` param:
	err = encoder.Encode(obj.AccountFlags)
	if err != nil {
		return err
	}
	// Serialize `Head` param:
	err = encoder.Encode(obj.Head)
	if err != nil {
		return err
	}
	// Serialize `Count` param:
	err = encoder.Encode(obj.Count)
	if err != nil {
		return err
	}
	// Serialize `SeqNum` param:
	err = encoder.Encode(obj.SeqNum)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EventQueueHeader) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `AccountFlags`:
	err = decoder.Decode(&obj.AccountFlags)
	if err != nil {
		return err
	}
	// Deserialize `Head`:
	err = decoder.Decode(&obj.Head)
	if err != nil {
		return err
	}
	// Deserialize `Count`:
	err = decoder.Decode(&obj.Count)
	if err != nil {
		return err
	}
	// Deserialize `SeqNum`:
	err = decoder.Decode(&obj.SeqNum)
	if err != nil {
		return err
	}
	return nil
}

type Event struct {
	EventFlags        uint8
	OwnerSlot         uint8
	FeeTier           uint8
	Padding           [5]uint8
	NativeQtyReleased uint64
	NativeQtyPaid     uint64
	NativeFeeOrRebate uint64
	OrderId           ag_binary.Uint128
	Owner             [4]uint64
	ClientOrderId     uint64
}

func (obj Event) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `EventFlags` param:
	err = encoder.Encode(obj.EventFlags)
	if err != nil {
		return err
	}
	// Serialize `OwnerSlot` param:
	err = encoder.Encode(obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Serialize `FeeTier` param:
	err = encoder.Encode(obj.FeeTier)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `NativeQtyReleased` param:
	err = encoder.Encode(obj.NativeQtyReleased)
	if err != nil {
		return err
	}
	// Serialize `NativeQtyPaid` param:
	err = encoder.Encode(obj.NativeQtyPaid)
	if err != nil {
		return err
	}
	// Serialize `NativeFeeOrRebate` param:
	err = encoder.Encode(obj.NativeFeeOrRebate)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `ClientOrderId` param:
	err = encoder.Encode(obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Event) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `EventFlags`:
	err = decoder.Decode(&obj.EventFlags)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSlot`:
	err = decoder.Decode(&obj.OwnerSlot)
	if err != nil {
		return err
	}
	// Deserialize `FeeTier`:
	err = decoder.Decode(&obj.FeeTier)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `NativeQtyReleased`:
	err = decoder.Decode(&obj.NativeQtyReleased)
	if err != nil {
		return err
	}
	// Deserialize `NativeQtyPaid`:
	err = decoder.Decode(&obj.NativeQtyPaid)
	if err != nil {
		return err
	}
	// Deserialize `NativeFeeOrRebate`:
	err = decoder.Decode(&obj.NativeFeeOrRebate)
	if err != nil {
		return err
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `ClientOrderId`:
	err = decoder.Decode(&obj.ClientOrderId)
	if err != nil {
		return err
	}
	return nil
}
