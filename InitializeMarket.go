// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"encoding/binary"
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitializeMarket is the `InitializeMarket` instruction.
type InitializeMarket struct {
	Args *InitializeMarketInstruction

	// [0] = [WRITE] marketToInitialize
	// ··········· the market to initialize
	//
	// [1] = [WRITE] requestQueue
	// ··········· zeroed out request queue
	//
	// [2] = [WRITE] eventQueue
	// ··········· zeroed out event queue
	//
	// [3] = [WRITE] bids
	// ··········· zeroed out bids
	//
	// [4] = [WRITE] asks
	// ··········· zeroed out asks
	//
	// [5] = [WRITE] splTokenAccountCoin
	// ··········· spl-token account for the coin currency
	//
	// [6] = [WRITE] splTokenAccountPrice
	// ··········· spl-token account for the price currency
	//
	// [7] = [] coinCurrencyMint
	// ··········· coin currency Mint
	//
	// [8] = [] priceCurrencyMint
	// ··········· price currency Mint
	//
	// [9] = [] rentSysvar
	// ··········· the rent sysvar
	//
	// [10] = [] openOrdersMarketAuthority
	// ··········· open orders market authority (optional)
	//
	// [11] = [] pruneAuthority
	// ··········· prune authority (optional, requires open orders market authority)
	//
	// [12] = [] crankAuthority
	// ··········· crank authority (optional, requires prune authority)
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeMarketInstructionBuilder creates a new `InitializeMarket` instruction builder.
func NewInitializeMarketInstructionBuilder() *InitializeMarket {
	nd := &InitializeMarket{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *InitializeMarket) SetArgs(args InitializeMarketInstruction) *InitializeMarket {
	inst.Args = &args
	return inst
}

// SetMarketToInitializeAccount sets the "marketToInitialize" account.
// the market to initialize
func (inst *InitializeMarket) SetMarketToInitializeAccount(marketToInitialize ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(marketToInitialize).WRITE()
	return inst
}

// GetMarketToInitializeAccount gets the "marketToInitialize" account.
// the market to initialize
func (inst *InitializeMarket) GetMarketToInitializeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetRequestQueueAccount sets the "requestQueue" account.
// zeroed out request queue
func (inst *InitializeMarket) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "requestQueue" account.
// zeroed out request queue
func (inst *InitializeMarket) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetEventQueueAccount sets the "eventQueue" account.
// zeroed out event queue
func (inst *InitializeMarket) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
// zeroed out event queue
func (inst *InitializeMarket) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetBidsAccount sets the "bids" account.
// zeroed out bids
func (inst *InitializeMarket) SetBidsAccount(bids ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
// zeroed out bids
func (inst *InitializeMarket) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetAsksAccount sets the "asks" account.
// zeroed out asks
func (inst *InitializeMarket) SetAsksAccount(asks ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
// zeroed out asks
func (inst *InitializeMarket) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetSplTokenAccountCoinAccount sets the "splTokenAccountCoin" account.
// spl-token account for the coin currency
func (inst *InitializeMarket) SetSplTokenAccountCoinAccount(splTokenAccountCoin ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(splTokenAccountCoin).WRITE()
	return inst
}

// GetSplTokenAccountCoinAccount gets the "splTokenAccountCoin" account.
// spl-token account for the coin currency
func (inst *InitializeMarket) GetSplTokenAccountCoinAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetSplTokenAccountPriceAccount sets the "splTokenAccountPrice" account.
// spl-token account for the price currency
func (inst *InitializeMarket) SetSplTokenAccountPriceAccount(splTokenAccountPrice ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(splTokenAccountPrice).WRITE()
	return inst
}

// GetSplTokenAccountPriceAccount gets the "splTokenAccountPrice" account.
// spl-token account for the price currency
func (inst *InitializeMarket) GetSplTokenAccountPriceAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetCoinCurrencyMintAccount sets the "coinCurrencyMint" account.
// coin currency Mint
func (inst *InitializeMarket) SetCoinCurrencyMintAccount(coinCurrencyMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(coinCurrencyMint)
	return inst
}

// GetCoinCurrencyMintAccount gets the "coinCurrencyMint" account.
// coin currency Mint
func (inst *InitializeMarket) GetCoinCurrencyMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetPriceCurrencyMintAccount sets the "priceCurrencyMint" account.
// price currency Mint
func (inst *InitializeMarket) SetPriceCurrencyMintAccount(priceCurrencyMint ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(priceCurrencyMint)
	return inst
}

// GetPriceCurrencyMintAccount gets the "priceCurrencyMint" account.
// price currency Mint
func (inst *InitializeMarket) GetPriceCurrencyMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// the rent sysvar
func (inst *InitializeMarket) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// the rent sysvar
func (inst *InitializeMarket) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

// SetOpenOrdersMarketAuthorityAccount sets the "openOrdersMarketAuthority" account.
// open orders market authority (optional)
func (inst *InitializeMarket) SetOpenOrdersMarketAuthorityAccount(openOrdersMarketAuthority ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(openOrdersMarketAuthority)
	return inst
}

// GetOpenOrdersMarketAuthorityAccount gets the "openOrdersMarketAuthority" account.
// open orders market authority (optional)
func (inst *InitializeMarket) GetOpenOrdersMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[10]
}

// SetPruneAuthorityAccount sets the "pruneAuthority" account.
// prune authority (optional, requires open orders market authority)
func (inst *InitializeMarket) SetPruneAuthorityAccount(pruneAuthority ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(pruneAuthority)
	return inst
}

// GetPruneAuthorityAccount gets the "pruneAuthority" account.
// prune authority (optional, requires open orders market authority)
func (inst *InitializeMarket) GetPruneAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[11]
}

// SetCrankAuthorityAccount sets the "crankAuthority" account.
// crank authority (optional, requires prune authority)
func (inst *InitializeMarket) SetCrankAuthorityAccount(crankAuthority ag_solanago.PublicKey) *InitializeMarket {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(crankAuthority)
	return inst
}

// GetCrankAuthorityAccount gets the "crankAuthority" account.
// crank authority (optional, requires prune authority)
func (inst *InitializeMarket) GetCrankAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[12]
}

func (inst InitializeMarket) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_InitializeMarket, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeMarket) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeMarket) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.MarketToInitialize is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RequestQueue is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Asks is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SplTokenAccountCoin is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SplTokenAccountPrice is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CoinCurrencyMint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.PriceCurrencyMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}

		// [10] = OpenOrdersMarketAuthority is optional

		// [11] = PruneAuthority is optional

		// [12] = CrankAuthority is optional

	}
	return nil
}

func (inst *InitializeMarket) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeMarket")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("       marketToInitialize", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("             requestQueue", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("               eventQueue", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("                     bids", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("                     asks", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("      splTokenAccountCoin", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("     splTokenAccountPrice", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("         coinCurrencyMint", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("        priceCurrencyMint", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("               rentSysvar", inst.AccountMetaSlice[9]))
						accountsBranch.Child(ag_format.Meta("openOrdersMarketAuthority", inst.AccountMetaSlice[10]))
						accountsBranch.Child(ag_format.Meta("           pruneAuthority", inst.AccountMetaSlice[11]))
						accountsBranch.Child(ag_format.Meta("           crankAuthority", inst.AccountMetaSlice[12]))
					})
				})
		})
}

func (obj InitializeMarket) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *InitializeMarket) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeMarketInstruction declares a new InitializeMarket instruction with the provided parameters and accounts.
func NewInitializeMarketInstruction(
	// Parameters:
	args InitializeMarketInstruction,
	// Accounts:
	marketToInitialize ag_solanago.PublicKey,
	requestQueue ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey,
	splTokenAccountCoin ag_solanago.PublicKey,
	splTokenAccountPrice ag_solanago.PublicKey,
	coinCurrencyMint ag_solanago.PublicKey,
	priceCurrencyMint ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	openOrdersMarketAuthority ag_solanago.PublicKey,
	pruneAuthority ag_solanago.PublicKey,
	crankAuthority ag_solanago.PublicKey) *InitializeMarket {
	return NewInitializeMarketInstructionBuilder().
		SetArgs(args).
		SetMarketToInitializeAccount(marketToInitialize).
		SetRequestQueueAccount(requestQueue).
		SetEventQueueAccount(eventQueue).
		SetBidsAccount(bids).
		SetAsksAccount(asks).
		SetSplTokenAccountCoinAccount(splTokenAccountCoin).
		SetSplTokenAccountPriceAccount(splTokenAccountPrice).
		SetCoinCurrencyMintAccount(coinCurrencyMint).
		SetPriceCurrencyMintAccount(priceCurrencyMint).
		SetRentSysvarAccount(rentSysvar).
		SetOpenOrdersMarketAuthorityAccount(openOrdersMarketAuthority).
		SetPruneAuthorityAccount(pruneAuthority).
		SetCrankAuthorityAccount(crankAuthority)
}
