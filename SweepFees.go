// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"encoding/binary"
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SweepFees is the `SweepFees` instruction.
type SweepFees struct {

	// [0] = [WRITE] market
	// ··········· market
	//
	// [1] = [WRITE] pcVault
	// ··········· pc vault
	//
	// [2] = [SIGNER] feeSweepingAuthority
	// ··········· fee sweeping authority
	//
	// [3] = [WRITE] feeReceivable
	// ··········· fee receivable account
	//
	// [4] = [] vaultSigner
	// ··········· vault signer
	//
	// [5] = [] splTokenProgram
	// ··········· spl token program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSweepFeesInstructionBuilder creates a new `SweepFees` instruction builder.
func NewSweepFeesInstructionBuilder() *SweepFees {
	nd := &SweepFees{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetMarketAccount sets the "market" account.
// market
func (inst *SweepFees) SetMarketAccount(market ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
// market
func (inst *SweepFees) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetPcVaultAccount sets the "pcVault" account.
// pc vault
func (inst *SweepFees) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
// pc vault
func (inst *SweepFees) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetFeeSweepingAuthorityAccount sets the "feeSweepingAuthority" account.
// fee sweeping authority
func (inst *SweepFees) SetFeeSweepingAuthorityAccount(feeSweepingAuthority ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(feeSweepingAuthority).SIGNER()
	return inst
}

// GetFeeSweepingAuthorityAccount gets the "feeSweepingAuthority" account.
// fee sweeping authority
func (inst *SweepFees) GetFeeSweepingAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetFeeReceivableAccount sets the "feeReceivable" account.
// fee receivable account
func (inst *SweepFees) SetFeeReceivableAccount(feeReceivable ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeReceivable).WRITE()
	return inst
}

// GetFeeReceivableAccount gets the "feeReceivable" account.
// fee receivable account
func (inst *SweepFees) GetFeeReceivableAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetVaultSignerAccount sets the "vaultSigner" account.
// vault signer
func (inst *SweepFees) SetVaultSignerAccount(vaultSigner ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(vaultSigner)
	return inst
}

// GetVaultSignerAccount gets the "vaultSigner" account.
// vault signer
func (inst *SweepFees) GetVaultSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// spl token program
func (inst *SweepFees) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *SweepFees {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// spl token program
func (inst *SweepFees) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

func (inst SweepFees) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_SweepFees, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SweepFees) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SweepFees) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.FeeSweepingAuthority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeReceivable is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.VaultSigner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
	}
	return nil
}

func (inst *SweepFees) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SweepFees")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("              market", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("             pcVault", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("feeSweepingAuthority", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("       feeReceivable", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("         vaultSigner", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("     splTokenProgram", inst.AccountMetaSlice[5]))
					})
				})
		})
}

func (obj SweepFees) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SweepFees) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSweepFeesInstruction declares a new SweepFees instruction with the provided parameters and accounts.
func NewSweepFeesInstruction(
	// Accounts:
	market ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	feeSweepingAuthority ag_solanago.PublicKey,
	feeReceivable ag_solanago.PublicKey,
	vaultSigner ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey) *SweepFees {
	return NewSweepFeesInstructionBuilder().
		SetMarketAccount(market).
		SetPcVaultAccount(pcVault).
		SetFeeSweepingAuthorityAccount(feeSweepingAuthority).
		SetFeeReceivableAccount(feeReceivable).
		SetVaultSignerAccount(vaultSigner).
		SetSplTokenProgramAccount(splTokenProgram)
}
