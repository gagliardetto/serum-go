// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"encoding/binary"
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// NewOrder is the `NewOrder` instruction.
type NewOrder struct {
	Args *NewOrderInstructionV1

	// [0] = [WRITE] market
	// ··········· the market
	//
	// [1] = [WRITE] openOrders
	// ··········· the OpenOrders account to use
	//
	// [2] = [WRITE] requestQueue
	// ··········· the request queue
	//
	// [3] = [WRITE] orderPayer
	// ··········· the (coin or price currency) account paying for the order
	//
	// [4] = [SIGNER] openOrdersAccountOwner
	// ··········· owner of the OpenOrders account
	//
	// [5] = [WRITE] coinVault
	// ··········· coin vault
	//
	// [6] = [WRITE] pcVault
	// ··········· pc vault
	//
	// [7] = [] splTokenProgram
	// ··········· spl token program
	//
	// [8] = [] rentSysvar
	// ··········· the rent sysvar
	//
	// [9] = [] feeDiscounts
	// ··········· (optional) the (M)SRM account used for fee discounts
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewNewOrderInstructionBuilder creates a new `NewOrder` instruction builder.
func NewNewOrderInstructionBuilder() *NewOrder {
	nd := &NewOrder{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetArgs sets the "args" parameter.
func (inst *NewOrder) SetArgs(args NewOrderInstructionV1) *NewOrder {
	inst.Args = &args
	return inst
}

// SetMarketAccount sets the "market" account.
// the market
func (inst *NewOrder) SetMarketAccount(market ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
// the market
func (inst *NewOrder) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOpenOrdersAccount sets the "openOrders" account.
// the OpenOrders account to use
func (inst *NewOrder) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
// the OpenOrders account to use
func (inst *NewOrder) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetRequestQueueAccount sets the "requestQueue" account.
// the request queue
func (inst *NewOrder) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "requestQueue" account.
// the request queue
func (inst *NewOrder) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetOrderPayerAccount sets the "orderPayer" account.
// the (coin or price currency) account paying for the order
func (inst *NewOrder) SetOrderPayerAccount(orderPayer ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(orderPayer).WRITE()
	return inst
}

// GetOrderPayerAccount gets the "orderPayer" account.
// the (coin or price currency) account paying for the order
func (inst *NewOrder) GetOrderPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetOpenOrdersAccountOwnerAccount sets the "openOrdersAccountOwner" account.
// owner of the OpenOrders account
func (inst *NewOrder) SetOpenOrdersAccountOwnerAccount(openOrdersAccountOwner ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(openOrdersAccountOwner).SIGNER()
	return inst
}

// GetOpenOrdersAccountOwnerAccount gets the "openOrdersAccountOwner" account.
// owner of the OpenOrders account
func (inst *NewOrder) GetOpenOrdersAccountOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetCoinVaultAccount sets the "coinVault" account.
// coin vault
func (inst *NewOrder) SetCoinVaultAccount(coinVault ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(coinVault).WRITE()
	return inst
}

// GetCoinVaultAccount gets the "coinVault" account.
// coin vault
func (inst *NewOrder) GetCoinVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetPcVaultAccount sets the "pcVault" account.
// pc vault
func (inst *NewOrder) SetPcVaultAccount(pcVault ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(pcVault).WRITE()
	return inst
}

// GetPcVaultAccount gets the "pcVault" account.
// pc vault
func (inst *NewOrder) GetPcVaultAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetSplTokenProgramAccount sets the "splTokenProgram" account.
// spl token program
func (inst *NewOrder) SetSplTokenProgramAccount(splTokenProgram ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(splTokenProgram)
	return inst
}

// GetSplTokenProgramAccount gets the "splTokenProgram" account.
// spl token program
func (inst *NewOrder) GetSplTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetRentSysvarAccount sets the "rentSysvar" account.
// the rent sysvar
func (inst *NewOrder) SetRentSysvarAccount(rentSysvar ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rentSysvar)
	return inst
}

// GetRentSysvarAccount gets the "rentSysvar" account.
// the rent sysvar
func (inst *NewOrder) GetRentSysvarAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetFeeDiscountsAccount sets the "feeDiscounts" account.
// (optional) the (M)SRM account used for fee discounts
func (inst *NewOrder) SetFeeDiscountsAccount(feeDiscounts ag_solanago.PublicKey) *NewOrder {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(feeDiscounts)
	return inst
}

// GetFeeDiscountsAccount gets the "feeDiscounts" account.
// (optional) the (M)SRM account used for fee discounts
func (inst *NewOrder) GetFeeDiscountsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

func (inst NewOrder) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_NewOrder, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst NewOrder) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *NewOrder) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Args == nil {
			return errors.New("Args parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RequestQueue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.OrderPayer is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OpenOrdersAccountOwner is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CoinVault is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.PcVault is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SplTokenProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.RentSysvar is not set")
		}

		// [9] = FeeDiscounts is optional

	}
	return nil
}

func (inst *NewOrder) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("NewOrder")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Args", *inst.Args))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                market", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("            openOrders", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("          requestQueue", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("            orderPayer", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("openOrdersAccountOwner", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("             coinVault", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("               pcVault", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("       splTokenProgram", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("            rentSysvar", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("          feeDiscounts", inst.AccountMetaSlice[9]))
					})
				})
		})
}

func (obj NewOrder) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Args` param:
	err = encoder.Encode(obj.Args)
	if err != nil {
		return err
	}
	return nil
}
func (obj *NewOrder) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Args`:
	err = decoder.Decode(&obj.Args)
	if err != nil {
		return err
	}
	return nil
}

// NewNewOrderInstruction declares a new NewOrder instruction with the provided parameters and accounts.
func NewNewOrderInstruction(
	// Parameters:
	args NewOrderInstructionV1,
	// Accounts:
	market ag_solanago.PublicKey,
	openOrders ag_solanago.PublicKey,
	requestQueue ag_solanago.PublicKey,
	orderPayer ag_solanago.PublicKey,
	openOrdersAccountOwner ag_solanago.PublicKey,
	coinVault ag_solanago.PublicKey,
	pcVault ag_solanago.PublicKey,
	splTokenProgram ag_solanago.PublicKey,
	rentSysvar ag_solanago.PublicKey,
	feeDiscounts ag_solanago.PublicKey) *NewOrder {
	return NewNewOrderInstructionBuilder().
		SetArgs(args).
		SetMarketAccount(market).
		SetOpenOrdersAccount(openOrders).
		SetRequestQueueAccount(requestQueue).
		SetOrderPayerAccount(orderPayer).
		SetOpenOrdersAccountOwnerAccount(openOrdersAccountOwner).
		SetCoinVaultAccount(coinVault).
		SetPcVaultAccount(pcVault).
		SetSplTokenProgramAccount(splTokenProgram).
		SetRentSysvarAccount(rentSysvar).
		SetFeeDiscountsAccount(feeDiscounts)
}
