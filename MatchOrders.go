// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serumgo

import (
	"encoding/binary"
	"errors"

	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MatchOrders is the `MatchOrders` instruction.
type MatchOrders struct {
	Limit *uint16

	// [0] = [WRITE] market
	// ··········· market
	//
	// [1] = [WRITE] requestQueue
	// ··········· req_q
	//
	// [2] = [WRITE] eventQueue
	// ··········· event_q
	//
	// [3] = [WRITE] bids
	// ··········· bids
	//
	// [4] = [WRITE] asks
	// ··········· asks
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMatchOrdersInstructionBuilder creates a new `MatchOrders` instruction builder.
func NewMatchOrdersInstructionBuilder() *MatchOrders {
	nd := &MatchOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetLimit sets the "limit" parameter.
func (inst *MatchOrders) SetLimit(limit uint16) *MatchOrders {
	inst.Limit = &limit
	return inst
}

// SetMarketAccount sets the "market" account.
// market
func (inst *MatchOrders) SetMarketAccount(market ag_solanago.PublicKey) *MatchOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
// market
func (inst *MatchOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRequestQueueAccount sets the "requestQueue" account.
// req_q
func (inst *MatchOrders) SetRequestQueueAccount(requestQueue ag_solanago.PublicKey) *MatchOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(requestQueue).WRITE()
	return inst
}

// GetRequestQueueAccount gets the "requestQueue" account.
// req_q
func (inst *MatchOrders) GetRequestQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetEventQueueAccount sets the "eventQueue" account.
// event_q
func (inst *MatchOrders) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *MatchOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
// event_q
func (inst *MatchOrders) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBidsAccount sets the "bids" account.
// bids
func (inst *MatchOrders) SetBidsAccount(bids ag_solanago.PublicKey) *MatchOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bids).WRITE()
	return inst
}

// GetBidsAccount gets the "bids" account.
// bids
func (inst *MatchOrders) GetBidsAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAsksAccount sets the "asks" account.
// asks
func (inst *MatchOrders) SetAsksAccount(asks ag_solanago.PublicKey) *MatchOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(asks).WRITE()
	return inst
}

// GetAsksAccount gets the "asks" account.
// asks
func (inst *MatchOrders) GetAsksAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst MatchOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_MatchOrders, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MatchOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MatchOrders) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Limit == nil {
			return errors.New("Limit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.RequestQueue is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Bids is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Asks is not set")
		}
	}
	return nil
}

func (inst *MatchOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MatchOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Limit", *inst.Limit))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("      market", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("requestQueue", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("  eventQueue", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("        bids", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        asks", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj MatchOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MatchOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

// NewMatchOrdersInstruction declares a new MatchOrders instruction with the provided parameters and accounts.
func NewMatchOrdersInstruction(
	// Parameters:
	limit uint16,
	// Accounts:
	market ag_solanago.PublicKey,
	requestQueue ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	bids ag_solanago.PublicKey,
	asks ag_solanago.PublicKey) *MatchOrders {
	return NewMatchOrdersInstructionBuilder().
		SetLimit(limit).
		SetMarketAccount(market).
		SetRequestQueueAccount(requestQueue).
		SetEventQueueAccount(eventQueue).
		SetBidsAccount(bids).
		SetAsksAccount(asks)
}
