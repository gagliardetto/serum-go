// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"encoding/binary"
	"errors"

	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// InitOpenOrders is the `InitOpenOrders` instruction.
type InitOpenOrders struct {

	// [0] = [WRITE] openOrders
	// ··········· OpenOrders
	//
	// [1] = [SIGNER] owner
	// ··········· the OpenOrders owner
	//
	// [2] = [] market
	// ··········· market
	//
	// [3] = [] rent
	// ··········· TODO: rent?
	//
	// [4] = [] marketAuthority
	// ··········· open orders market authority (optional).
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitOpenOrdersInstructionBuilder creates a new `InitOpenOrders` instruction builder.
func NewInitOpenOrdersInstructionBuilder() *InitOpenOrders {
	nd := &InitOpenOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetOpenOrdersAccount sets the "openOrders" account.
// OpenOrders
func (inst *InitOpenOrders) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *InitOpenOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
// OpenOrders
func (inst *InitOpenOrders) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetOwnerAccount sets the "owner" account.
// the OpenOrders owner
func (inst *InitOpenOrders) SetOwnerAccount(owner ag_solanago.PublicKey) *InitOpenOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// the OpenOrders owner
func (inst *InitOpenOrders) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetMarketAccount sets the "market" account.
// market
func (inst *InitOpenOrders) SetMarketAccount(market ag_solanago.PublicKey) *InitOpenOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
// market
func (inst *InitOpenOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetRentAccount sets the "rent" account.
// TODO: rent?
func (inst *InitOpenOrders) SetRentAccount(rent ag_solanago.PublicKey) *InitOpenOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
// TODO: rent?
func (inst *InitOpenOrders) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetMarketAuthorityAccount sets the "marketAuthority" account.
// open orders market authority (optional).
func (inst *InitOpenOrders) SetMarketAuthorityAccount(marketAuthority ag_solanago.PublicKey) *InitOpenOrders {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(marketAuthority)
	return inst
}

// GetMarketAuthorityAccount gets the "marketAuthority" account.
// open orders market authority (optional).
func (inst *InitOpenOrders) GetMarketAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

func (inst InitOpenOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_InitOpenOrders, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitOpenOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitOpenOrders) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Rent is not set")
		}

		// [4] = MarketAuthority is optional

	}
	return nil
}

func (inst *InitOpenOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitOpenOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     openOrders", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("         market", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice[3]))
						if len(inst.AccountMetaSlice) > 4 {
							accountsBranch.Child(ag_format.Meta("marketAuthority", inst.AccountMetaSlice[4]))
						}
					})
				})
		})
}

func (obj InitOpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitOpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitOpenOrdersInstruction declares a new InitOpenOrders instruction with the provided parameters and accounts.
func NewInitOpenOrdersInstruction(
	// Accounts:
	openOrders ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	marketAuthority ag_solanago.PublicKey) *InitOpenOrders {
	return NewInitOpenOrdersInstructionBuilder().
		SetOpenOrdersAccount(openOrders).
		SetOwnerAccount(owner).
		SetMarketAccount(market).
		SetRentAccount(rent).
		SetMarketAuthorityAccount(marketAuthority)
}
