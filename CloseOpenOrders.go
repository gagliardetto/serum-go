// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serumgo

import (
	"encoding/binary"
	"errors"

	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CloseOpenOrders is the `CloseOpenOrders` instruction.
type CloseOpenOrders struct {

	// [0] = [WRITE] openOrders
	// ··········· OpenOrders
	//
	// [1] = [SIGNER] owner
	// ··········· the OpenOrders owner
	//
	// [2] = [WRITE] destination
	// ··········· the destination account to send rent exemption SOL to
	//
	// [3] = [] market
	// ··········· market
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCloseOpenOrdersInstructionBuilder creates a new `CloseOpenOrders` instruction builder.
func NewCloseOpenOrdersInstructionBuilder() *CloseOpenOrders {
	nd := &CloseOpenOrders{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetOpenOrdersAccount sets the "openOrders" account.
// OpenOrders
func (inst *CloseOpenOrders) SetOpenOrdersAccount(openOrders ag_solanago.PublicKey) *CloseOpenOrders {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(openOrders).WRITE()
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" account.
// OpenOrders
func (inst *CloseOpenOrders) GetOpenOrdersAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
// the OpenOrders owner
func (inst *CloseOpenOrders) SetOwnerAccount(owner ag_solanago.PublicKey) *CloseOpenOrders {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
// the OpenOrders owner
func (inst *CloseOpenOrders) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetDestinationAccount sets the "destination" account.
// the destination account to send rent exemption SOL to
func (inst *CloseOpenOrders) SetDestinationAccount(destination ag_solanago.PublicKey) *CloseOpenOrders {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(destination).WRITE()
	return inst
}

// GetDestinationAccount gets the "destination" account.
// the destination account to send rent exemption SOL to
func (inst *CloseOpenOrders) GetDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMarketAccount sets the "market" account.
// market
func (inst *CloseOpenOrders) SetMarketAccount(market ag_solanago.PublicKey) *CloseOpenOrders {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(market)
	return inst
}

// GetMarketAccount gets the "market" account.
// market
func (inst *CloseOpenOrders) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CloseOpenOrders) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_CloseOpenOrders, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CloseOpenOrders) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CloseOpenOrders) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.OpenOrders is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Destination is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Market is not set")
		}
	}
	return nil
}

func (inst *CloseOpenOrders) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CloseOpenOrders")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta(" openOrders", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("destination", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     market", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CloseOpenOrders) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *CloseOpenOrders) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewCloseOpenOrdersInstruction declares a new CloseOpenOrders instruction with the provided parameters and accounts.
func NewCloseOpenOrdersInstruction(
	// Accounts:
	openOrders ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	destination ag_solanago.PublicKey,
	market ag_solanago.PublicKey) *CloseOpenOrders {
	return NewCloseOpenOrdersInstructionBuilder().
		SetOpenOrdersAccount(openOrders).
		SetOwnerAccount(owner).
		SetDestinationAccount(destination).
		SetMarketAccount(market)
}
