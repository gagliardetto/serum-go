// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"encoding/binary"
	"errors"

	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	"github.com/gagliardetto/solana-go/text"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ConsumeEventsPermissioned is the `ConsumeEventsPermissioned` instruction.
type ConsumeEventsPermissioned struct {
	Limit *uint16

	// [...] = [WRITE] openOrders
	// ··········· OpenOrders;
	OpenOrders ag_solanago.AccountMetaSlice `bin:"-"`
	//
	// [0] = [WRITE] market
	// ··········· market
	//
	// [1] = [WRITE] eventQueue
	// ··········· event queue
	//
	// [2] = [SIGNER] crankAuthority
	// ··········· crank authority
	OtherAccounts ag_solanago.AccountMetaSlice `bin:"-"`
}

var _ ag_solanago.AccountsSettable = new(ConsumeEventsPermissioned)
var _ ag_solanago.AccountsGettable = new(ConsumeEventsPermissioned)

func (accs *ConsumeEventsPermissioned) SetAccounts(accounts []*ag_solanago.AccountMeta) error {
	l := len(accounts)
	switch {
	case l <= 3:
		return accs.OtherAccounts.SetAccounts(accounts)
	default:
		accs.OpenOrders, accs.OtherAccounts = ag_solanago.AccountMetaSlice(accounts).SplitFrom(len(accounts) - 3)
	}
	return nil
}

func (accs *ConsumeEventsPermissioned) GetAccounts() (out []*ag_solanago.AccountMeta) {
	out = append(out, accs.OpenOrders.GetAccounts()...)
	out = append(out, accs.OtherAccounts.GetAccounts()...)
	return
}

// NewConsumeEventsPermissionedInstructionBuilder creates a new `ConsumeEventsPermissioned` instruction builder.
func NewConsumeEventsPermissionedInstructionBuilder() *ConsumeEventsPermissioned {
	nd := &ConsumeEventsPermissioned{
		OpenOrders:    make(ag_solanago.AccountMetaSlice, 0),
		OtherAccounts: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetLimit sets the "limit" parameter.
func (inst *ConsumeEventsPermissioned) SetLimit(limit uint16) *ConsumeEventsPermissioned {
	inst.Limit = &limit
	return inst
}

// SetOpenOrdersAccount sets the "openOrders" accounts.
func (inst *ConsumeEventsPermissioned) SetOpenOrdersAccounts(openOrders ...ag_solanago.PublicKey) *ConsumeEventsPermissioned {
	for _, account := range openOrders {
		inst.OpenOrders.Append(ag_solanago.Meta(account).WRITE())
	}
	return inst
}

// GetOpenOrdersAccount gets the "openOrders" accounts.
func (inst *ConsumeEventsPermissioned) GetOpenOrdersAccounts() ag_solanago.AccountMetaSlice {
	return inst.OpenOrders
}

// SetMarketAccount sets the "market" account.
// market
func (inst *ConsumeEventsPermissioned) SetMarketAccount(market ag_solanago.PublicKey) *ConsumeEventsPermissioned {
	inst.OtherAccounts[0] = ag_solanago.Meta(market).WRITE()
	return inst
}

// GetMarketAccount gets the "market" account.
// market
func (inst *ConsumeEventsPermissioned) GetMarketAccount() *ag_solanago.AccountMeta {
	return inst.OtherAccounts[0]
}

// SetEventQueueAccount sets the "eventQueue" account.
// event queue
func (inst *ConsumeEventsPermissioned) SetEventQueueAccount(eventQueue ag_solanago.PublicKey) *ConsumeEventsPermissioned {
	inst.OtherAccounts[1] = ag_solanago.Meta(eventQueue).WRITE()
	return inst
}

// GetEventQueueAccount gets the "eventQueue" account.
// event queue
func (inst *ConsumeEventsPermissioned) GetEventQueueAccount() *ag_solanago.AccountMeta {
	return inst.OtherAccounts[1]
}

// SetCrankAuthorityAccount sets the "crankAuthority" account.
// crank authority
func (inst *ConsumeEventsPermissioned) SetCrankAuthorityAccount(crankAuthority ag_solanago.PublicKey) *ConsumeEventsPermissioned {
	inst.OtherAccounts[2] = ag_solanago.Meta(crankAuthority).SIGNER()
	return inst
}

// GetCrankAuthorityAccount gets the "crankAuthority" account.
// crank authority
func (inst *ConsumeEventsPermissioned) GetCrankAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.OtherAccounts[2]
}

func (inst ConsumeEventsPermissioned) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: ag_binary.TypeIDFromUint32(Instruction_ConsumeEventsPermissioned, binary.LittleEndian),
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ConsumeEventsPermissioned) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ConsumeEventsPermissioned) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Limit == nil {
			return errors.New("Limit parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.OpenOrders.Len() == 0 {
			// TODO: is there a minimum?
			// return errors.New("accounts.OpenOrders is not set")
		}
		if inst.OtherAccounts[0] == nil {
			return errors.New("accounts.Market is not set")
		}
		if inst.OtherAccounts[1] == nil {
			return errors.New("accounts.EventQueue is not set")
		}
		if inst.OtherAccounts[2] == nil {
			return errors.New("accounts.CrankAuthority is not set")
		}
	}
	return nil
}

func (inst *ConsumeEventsPermissioned) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ConsumeEventsPermissioned")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Limit", *inst.Limit))
					})

					instructionBranch.Child(text.Sf("OpenOrderAccount[len=%v]", len(inst.OpenOrders))).ParentFunc(func(accountsBranch ag_treeout.Branches) {
						for i := range inst.OpenOrders {
							accountsBranch.Child(ag_format.Meta(text.Sf("openOrders[%v]", i), inst.OpenOrders[i]))
						}
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        market", inst.OtherAccounts[0]))
						accountsBranch.Child(ag_format.Meta("    eventQueue", inst.OtherAccounts[1]))
						accountsBranch.Child(ag_format.Meta("crankAuthority", inst.OtherAccounts[2]))
					})
				})
		})
}

func (obj ConsumeEventsPermissioned) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Limit` param:
	err = encoder.Encode(obj.Limit)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ConsumeEventsPermissioned) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Limit`:
	err = decoder.Decode(&obj.Limit)
	if err != nil {
		return err
	}
	return nil
}

// NewConsumeEventsPermissionedInstruction declares a new ConsumeEventsPermissioned instruction with the provided parameters and accounts.
func NewConsumeEventsPermissionedInstruction(
	// Parameters:
	limit uint16,
	// Accounts:
	openOrders []ag_solanago.PublicKey,
	market ag_solanago.PublicKey,
	eventQueue ag_solanago.PublicKey,
	crankAuthority ag_solanago.PublicKey) *ConsumeEventsPermissioned {
	return NewConsumeEventsPermissionedInstructionBuilder().
		SetLimit(limit).
		SetOpenOrdersAccounts(openOrders...).
		SetMarketAccount(market).
		SetEventQueueAccount(eventQueue).
		SetCrankAuthorityAccount(crankAuthority)
}
