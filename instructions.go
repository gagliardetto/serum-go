// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package serum_dex

import (
	"bytes"
	"encoding/binary"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "SerumDex"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

const (
	Instruction_InitializeMarket uint32 = iota

	Instruction_NewOrder

	Instruction_MatchOrders

	Instruction_ConsumeEvents

	Instruction_CancelOrder

	Instruction_SettleFunds

	Instruction_CancelOrderByClientId

	Instruction_DisableMarket

	Instruction_SweepFees

	Instruction_NewOrderV2

	Instruction_NewOrderV3

	Instruction_CancelOrderV2

	Instruction_CancelOrderByClientIdV2

	Instruction_SendTake

	Instruction_CloseOpenOrders

	Instruction_InitOpenOrders

	// Removes all orders for a given open orders account from the orderbook.
	Instruction_Prune

	Instruction_ConsumeEventsPermissioned
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id uint32) string {
	switch id {
	case Instruction_InitializeMarket:
		return "InitializeMarket"
	case Instruction_NewOrder:
		return "NewOrder"
	case Instruction_MatchOrders:
		return "MatchOrders"
	case Instruction_ConsumeEvents:
		return "ConsumeEvents"
	case Instruction_CancelOrder:
		return "CancelOrder"
	case Instruction_SettleFunds:
		return "SettleFunds"
	case Instruction_CancelOrderByClientId:
		return "CancelOrderByClientId"
	case Instruction_DisableMarket:
		return "DisableMarket"
	case Instruction_SweepFees:
		return "SweepFees"
	case Instruction_NewOrderV2:
		return "NewOrderV2"
	case Instruction_NewOrderV3:
		return "NewOrderV3"
	case Instruction_CancelOrderV2:
		return "CancelOrderV2"
	case Instruction_CancelOrderByClientIdV2:
		return "CancelOrderByClientIdV2"
	case Instruction_SendTake:
		return "SendTake"
	case Instruction_CloseOpenOrders:
		return "CloseOpenOrders"
	case Instruction_InitOpenOrders:
		return "InitOpenOrders"
	case Instruction_Prune:
		return "Prune"
	case Instruction_ConsumeEventsPermissioned:
		return "ConsumeEventsPermissioned"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.Uint32TypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"InitializeMarket", (*InitializeMarket)(nil),
		},
		{
			"NewOrder", (*NewOrder)(nil),
		},
		{
			"MatchOrders", (*MatchOrders)(nil),
		},
		{
			"ConsumeEvents", (*ConsumeEvents)(nil),
		},
		{
			"CancelOrder", (*CancelOrder)(nil),
		},
		{
			"SettleFunds", (*SettleFunds)(nil),
		},
		{
			"CancelOrderByClientId", (*CancelOrderByClientId)(nil),
		},
		{
			"DisableMarket", (*DisableMarket)(nil),
		},
		{
			"SweepFees", (*SweepFees)(nil),
		},
		{
			"NewOrderV2", (*NewOrderV2)(nil),
		},
		{
			"NewOrderV3", (*NewOrderV3)(nil),
		},
		{
			"CancelOrderV2", (*CancelOrderV2)(nil),
		},
		{
			"CancelOrderByClientIdV2", (*CancelOrderByClientIdV2)(nil),
		},
		{
			"SendTake", (*SendTake)(nil),
		},
		{
			"CloseOpenOrders", (*CloseOpenOrders)(nil),
		},
		{
			"InitOpenOrders", (*InitOpenOrders)(nil),
		},
		{
			"Prune", (*Prune)(nil),
		},
		{
			"ConsumeEventsPermissioned", (*ConsumeEventsPermissioned)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteUint32(inst.TypeID.Uint32(), binary.LittleEndian)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
